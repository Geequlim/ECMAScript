#!/usr/bin/env python
import os

from misc.generate.generate_files import generate

Import("env")
Import("env_modules")

env_javascript = env_modules.Clone()

# Default engine to use we might add some more in the future like node or v8
JS_ENGINE = "quickjs"
javascript_dir = os.path.join(GetLaunchDir(), "modules", os.path.basename(os.getcwd()))

# Windows workaround
if env["platform"] == "windows":
    if env["use_mingw"]:
        env.Append(LIBS=["pthread"])

# Add required files for quickjs into godot
if JS_ENGINE == "quickjs":
    import generate_builtin_api

    generate_builtin_api.generate_api_json(javascript_dir)
    import thirdparty.quickjs.builtin_binding_generator

    thirdparty.quickjs.builtin_binding_generator.generate_builtin_bindings()
    version = open("thirdparty/quickjs/quickjs/VERSION.txt", "r").read().split("\n")[0]
    quickjs_env = env_javascript.Clone()
    quickjs_env.Append(CPPDEFINES={"QUICKJS_CONFIG_VERSION": '"' + version + '"'})
    quickjs_env.Append(CPPDEFINES=["CONFIG_BIGNUM"])
    if "release" not in (quickjs_env["target"] or ""):
        quickjs_env.Append(CPPDEFINES={"DUMP_LEAKS": 1})
        # TODO: Fix debugger
        # quickjs_env.Append(CPPDEFINES={"QUICKJS_WITH_DEBUGGER": 1})
    quickjs_env.Append(CPPPATH=["thirdparty/quickjs/quickjs"])
    quickjs_env.Append(CPPPATH=["thirdparty/quickjs"])
    quickjs_env.disable_warnings()
    quickjs_env.add_source_files(env.modules_sources, "thirdparty/quickjs/quickjs_builtin_binder.gen.cpp")
    quickjs_env.add_source_files(env.modules_sources, "thirdparty/quickjs/*.cpp")
    quickjs_env.add_source_files(env.modules_sources, "thirdparty/quickjs/quickjs/*.c")

# If target=editor is provided via scons
if env.editor_build:
    env_javascript.add_source_files(env.modules_sources, "editor/workarounds/*.cpp")
    env_javascript.add_source_files(env.modules_sources, "editor/*.cpp")

    # --- Generate editor tool files ---
    from misc.generate.editor_tools import get_editor_tools_files
    from misc.generate.editor_tools import get_editor_tools_header

    files = get_editor_tools_files()
    generate(javascript_dir, get_editor_tools_header(), files)
    env_javascript.add_source_files(env.modules_sources, files.keys())

# If tests=yes flag is provided via scons
if env["tests"]:
    env_javascript.Append(CPPDEFINES=["TESTS_ENABLED"])

    # --- Generate test files ---
    from misc.generate.test_manager import get_test_files
    from misc.generate.test_manager import get_test_manager_header

    files = get_test_files()
    generate(javascript_dir, get_test_manager_header(), files)
    env_javascript.add_source_files(env.modules_sources, files.keys())

# --- Files inside editor & targets ---

sources = [
    "register_types.cpp",
    "javascript_language.cpp",
    "javascript_instance.cpp",
    "javascript.cpp",
]

# Add all required files for "Javascript" language into godot
env_javascript.Append(CPPPATH=["#modules/javascript"])
env_javascript.add_source_files(env.modules_sources, sources)

# --- Generate binding files ---
# Binding script to run at engine initializing
# The bindings add some functionality for `this.connect(...)`
from misc.generate.bindings import get_bindings_header
from misc.generate.bindings import get_binding_files

files = get_binding_files()
generate(javascript_dir, get_bindings_header(), files)
env_javascript.add_source_files(env.modules_sources, files.keys())
